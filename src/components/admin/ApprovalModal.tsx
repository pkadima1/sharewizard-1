/**
 * ApprovalModal.tsx - Partner Application Approval Modal
 * 
 * Purpose: Modal for approving partner applications with commission rate and referral code
 * Features: Commission rate selection, custom code input, summary preview
 */

import React, { useState, useEffect } from 'react';
import { Timestamp } from 'firebase/firestore';

// UI Components
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

// Icons
import { Percent, Hash, Copy, CheckCircle } from 'lucide-react';

// Import shared types
import { PartnerApplication } from '@/types/partnerApplication';

interface ApprovalModalProps {
  isOpen: boolean;
  onClose: () => void;
  application: PartnerApplication;
  onSubmit: (commissionRate: number, desiredCode?: string) => void;
  loading: boolean;
  t: any;
}

const ApprovalModal: React.FC<ApprovalModalProps> = ({
  isOpen,
  onClose,
  application,
  onSubmit,
  loading,
  t
}) => {
  const [commissionRate, setCommissionRate] = useState(0.7); // 70% - valid 5% increment
  const [desiredCode, setDesiredCode] = useState('');
  const [autoGeneratedCode, setAutoGeneratedCode] = useState('');
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  // Generate auto code when modal opens
  useEffect(() => {
    if (isOpen && application) {
      const baseCode = application.displayName
        .replace(/[^A-Z0-9]/gi, '')
        .toUpperCase()
        .substring(0, 8);
      
      // Add random suffix
      const suffix = Math.random().toString(36).substring(2, 6).toUpperCase();
      setAutoGeneratedCode(`${baseCode}${suffix}`);
    }
  }, [isOpen, application]);

  // Commission rate options - must be in 5% increments to match backend validation
  const commissionRateOptions = [
    { value: 0.1, label: '10%' },
    { value: 0.15, label: '15%' },
    { value: 0.2, label: '20%' },
    { value: 0.25, label: '25%' },
    { value: 0.3, label: '30%' },
    { value: 0.35, label: '35%' },
    { value: 0.4, label: '40%' },
    { value: 0.45, label: '45%' },
    { value: 0.5, label: '50%' },
    { value: 0.55, label: '55%' },
    { value: 0.6, label: '60%' },
    { value: 0.65, label: '65%' },
    { value: 0.7, label: '70%' },
    { value: 0.75, label: '75%' },
    { value: 0.8, label: '80%' },
    { value: 0.85, label: '85%' },
    { value: 0.9, label: '90%' },
  ];

  // Validation functions
  const validateCode = (code: string): boolean => {
    const codeRegex = /^[A-Z0-9]{3,20}$/;
    return codeRegex.test(code);
  };

  const validateCommissionRate = (rate: number): boolean => {
    // Check range
    if (rate < 0.1 || rate > 0.9) {
      return false;
    }
    
    // Handle floating-point precision issues
    // Convert to percentage and check if it's a multiple of 5
    const percentage = Math.round(rate * 100);
    return percentage % 5 === 0;
  };

  const validateForm = (): boolean => {
    const newErrors: { [key: string]: string } = {};

    if (desiredCode && !validateCode(desiredCode)) {
      newErrors.desiredCode = t('errors.invalidCode');
    }

    if (!validateCommissionRate(commissionRate)) {
      newErrors.commissionRate = t('errors.invalidCommissionRate');
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = () => {
    if (!validateForm()) return;

    const finalCode = desiredCode || autoGeneratedCode;
    onSubmit(commissionRate, desiredCode || undefined);
  };

  // Copy code to clipboard
  const copyCode = (code: string) => {
    navigator.clipboard.writeText(code);
    // You could add a toast notification here
  };

  // Get final code for display
  const getFinalCode = () => desiredCode || autoGeneratedCode;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-600" />
            {t('approval.title')}
          </DialogTitle>
          <DialogDescription>
            {t('approval.subtitle', { name: application.displayName })}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Commission Rate Selection */}
          <div className="space-y-3">
            <Label htmlFor="commissionRate" className="text-sm font-medium">
              {t('approval.commissionRate')}
            </Label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {t('approval.commissionRateDesc')}
            </p>
            <Select value={commissionRate.toString()} onValueChange={(value) => setCommissionRate(parseFloat(value))}>
              <SelectTrigger className={errors.commissionRate ? 'border-red-500' : ''}>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {commissionRateOptions.map((option) => (
                  <SelectItem key={option.value} value={option.value.toString()}>
                    <div className="flex items-center gap-2">
                      <Percent className="h-4 w-4" />
                      {option.label}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.commissionRate && (
              <p className="text-sm text-red-600 dark:text-red-400">
                {errors.commissionRate}
              </p>
            )}
          </div>

          {/* Desired Code Input */}
          <div className="space-y-3">
            <Label htmlFor="desiredCode" className="text-sm font-medium">
              {t('approval.desiredCode')}
            </Label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {t('approval.desiredCodeDesc')}
            </p>
            <Input
              id="desiredCode"
              placeholder={t('approval.desiredCodePlaceholder')}
              value={desiredCode}
              onChange={(e) => setDesiredCode(e.target.value.toUpperCase())}
              className={errors.desiredCode ? 'border-red-500' : ''}
            />
            {errors.desiredCode && (
              <p className="text-sm text-red-600 dark:text-red-400">
                {errors.desiredCode}
              </p>
            )}
            {!desiredCode && (
              <p className="text-sm text-gray-500 dark:text-gray-400">
                {t('approval.autoGeneratedCode', { code: autoGeneratedCode })}
              </p>
            )}
          </div>

          {/* Summary Card */}
          <Card className="bg-gray-50 dark:bg-gray-800">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg flex items-center gap-2">
                <Hash className="h-5 w-5" />
                {t('approval.summary')}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  {t('approval.summaryText', { 
                    rate: (commissionRate * 100).toFixed(0),
                    code: getFinalCode()
                  })}
                </span>
              </div>
              
              <div className="flex items-center gap-2">
                <Badge variant="outline" className="font-mono">
                  {getFinalCode()}
                </Badge>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => copyCode(getFinalCode())}
                >
                  <Copy className="h-4 w-4" />
                </Button>
              </div>
              
              <div className="text-sm text-gray-600 dark:text-gray-400">
                Referral Link: <code className="bg-gray-200 dark:bg-gray-700 px-1 rounded">/signup?ref={getFinalCode()}</code>
              </div>
            </CardContent>
          </Card>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose} disabled={loading}>
            {t('actions.cancel')}
          </Button>
          <Button 
            onClick={handleSubmit} 
            disabled={loading}
            className="bg-green-600 hover:bg-green-700"
          >
            {loading ? t('approval.approving') : t('approval.approve')}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default ApprovalModal;
