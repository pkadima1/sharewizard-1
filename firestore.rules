rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =============================
    // üîí HELPER FUNCTIONS
    // =============================

    // Check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Check if the user has purchased Flex (one-time purchase)
    function hasFlexyAccess() {
      return request.auth.token.stripeRole == "flexy";
    }

    // Check if the user has a Basic subscription (either monthly or yearly)
    function hasBasicSubs() {
      return request.auth.token.stripeRole == "basicMonth" || 
             request.auth.token.stripeRole == "basicYear";
    }

    // Check if the user has a Premium (Pro) subscription
    function hasPremiumSubs() {
      return request.auth.token.stripeRole == "premiumMonth" ||
             request.auth.token.stripeRole == "premiumYear";
    }
      
    // Check if the user has service account permissions (for Cloud Functions)
    function isServiceAccount() {
      return request.auth != null && 
        (request.auth.token.firebase.sign_in_provider == 'custom' || 
         request.auth.token.firebase.sign_in_provider == 'service_account' ||
         // Additional check for emulator compatibility
         request.auth.token.iss != null && request.auth.token.iss.contains('firebase-adminsdk') ||
         // Fallback for emulator - check for admin SDK usage
         request.auth.token.firebase.sign_in_provider == null);
    }

    // =============================
    // üõ°Ô∏è ADMIN ACCESS FUNCTIONS (FIXED)
    // =============================
    
    // Check if user is admin based on exact email match
    function isAdmin() {
      return request.auth != null && 
             (request.auth.token.email == 'engageperfect@gmail.com' ||
              (request.auth.token.firebase.identities.email != null &&
               request.auth.token.firebase.identities.email[0] == 'engageperfect@gmail.com'));
    }
    
    // Check if user is super admin (add your actual admin UIDs here)
    function isSuperAdmin() {
      return request.auth != null && 
             request.auth.uid in ['YOUR_ACTUAL_ADMIN_UID_HERE'];
    }
    
    // Combined admin check
    function hasAdminAccess() {
      return isAdmin() || isSuperAdmin() || isServiceAccount();
    }

    // =============================
    // üß© PARTNER & AFFILIATE HELPERS
    // =============================
    function isPartner() {
      return request.auth != null &&
             (request.auth.token.partner == true ||
              request.auth.token.role == 'partner');
    }

    function isAffiliate() {
      return request.auth != null &&
             (request.auth.token.affiliate == true ||
              request.auth.token.role == 'affiliate');
    }

    function isPartnerOrAffiliate() {
      return isPartner() || isAffiliate();
    }
     
    // =============================
    // üë§ USER PROFILES
    // =============================
    
    match /users/{userId} {
      allow read: if request.auth.uid == userId || hasAdminAccess();
      allow create: if request.auth.uid == userId || isServiceAccount();
      allow update: if request.auth.uid == userId || hasAdminAccess() || isServiceAccount();
      allow delete: if hasAdminAccess();
      
      // =============================
      // üìÑ USER CONTENT SUBCOLLECTIONS
      // =============================
      
      match /longform-content/{contentId} {
        allow read, write: if request.auth.uid == userId || hasAdminAccess();
        allow write: if isServiceAccount(); // Allow Cloud Functions to write
      }
      
      match /generations/{generationId} {
        allow read, write: if request.auth.uid == userId || hasAdminAccess();
        allow write: if isServiceAccount(); // Allow Cloud Functions to write
        
        match /shares/{shareId} {
          allow read, write: if request.auth.uid == userId || hasAdminAccess();
          allow write: if isServiceAccount();
        }
      }
      
      match /captions/{captionId} {
        allow read, write: if request.auth.uid == userId || hasAdminAccess();
        allow write: if isServiceAccount(); // Allow Cloud Functions to write
      }
    }

    // =============================
    // üí¨ SUPPORT CHAT COLLECTIONS (FIXED)
    // =============================
    
    // Support chat conversations - RELAXED RULES FOR TESTING
    match /supportChats/{userId} {
      // Allow user access to their own chats
      allow read, write: if request.auth.uid == userId;
      // Allow admin access to all chats
      allow read, write: if hasAdminAccess();
      // CRITICAL: Allow Cloud Functions to write chat data
      allow read, write: if isServiceAccount();
      
      // Chat messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth.uid == userId;
        allow read, write: if hasAdminAccess();
        allow read, write: if isServiceAccount(); // CRITICAL FOR CHAT TO WORK
      }
      
      // Rate limiting subcollection
      match /rateLimit/{limitId} {
        allow read, write: if request.auth.uid == userId;
        allow read, write: if hasAdminAccess();
        allow read, write: if isServiceAccount();
      }
      
      // Chat feedback subcollection
      match /feedback/{feedbackId} {
        allow read, write: if request.auth.uid == userId;
        allow read, write: if hasAdminAccess();
        allow read, write: if isServiceAccount();
      }
    }


    // =============================
    // üìß NEWSLETTER SUBSCRIPTIONS
    // =============================

    // Allow anyone to subscribe to newsletter (unauthenticated writes allowed)
    match /blogSubs/{docId} {
      allow create: if true; // Allow anyone to create newsletter subscriptions
      allow read: if false; // Don't allow reading (privacy)
      allow update, delete: if false; // Don't allow updates or deletes
    }
    
    
     // =============================
    // üìù CONTACT FORM SUBMISSIONS
    // =============================

    // Allow anyone to submit contact forms (unauthenticated writes allowed)
    match /EngPcontactForm/{docId} {
      allow create: if true; // Allow anyone to create contact form submissions
      allow read: if false; // Don't allow reading (privacy)
      allow update, delete: if false; // Don't allow updates or deletes
    }
    
    // =============================
    // ÔøΩ BLOG CONTENT ACCESS
    // =============================
    
    // Special read access for afribudget@gmail.com's longform content for blog display
    match /users/CMJHcwlYKyOmxnQpDajZMb31lHG3/longform-content/{contentId} {
      // Allow public read access to completed longform content for blog display
      allow read: if resource.data.status == "completed";
       // No authentication required - completely public for SEO and accessibility
      allow read: if true;
    }


    // =============================
    // üìä ADMIN ANALYTICS COLLECTIONS
    // =============================
    
    match /analytics/{document} {
      allow read, write: if hasAdminAccess() || isServiceAccount();
    }
    
    match /adminLogs/{logId} {
      allow read, write: if hasAdminAccess() || isServiceAccount();
    }
    
    match /systemHealth/{healthId} {
      allow read, write: if hasAdminAccess() || isServiceAccount();
    }

    // =============================
    // üîê STRIPE CUSTOMER DATA
    // =============================

    // Stripe customer data - users can only access their own data
    // Admins can read all customer data for support
    match /customers/{uid} {
      allow read: if request.auth.uid == uid || hasAdminAccess();
      allow write: if isServiceAccount();

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
        allow read: if hasAdminAccess();
        allow write: if isServiceAccount();
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid || hasAdminAccess();
        allow write: if isServiceAccount();
      }
      match /payments/{id} {
        allow read: if request.auth.uid == uid || hasAdminAccess();
        allow write: if isServiceAccount();
      }
    }




    // =============================
    // üí≥ SUBSCRIPTION DATA
    // =============================

    // Additional subscription collection (if used)
    match /subscriptions/{customerId} {
      allow read, write: if request.auth.uid == customerId || hasAdminAccess();
      allow write: if isServiceAccount();
    }
    // =============================
    // üì¶ STRIPE PRODUCTS & PRICING
		// =============================

    match /products/{id} {
      allow read: if true;
      allow write: if isServiceAccount() || hasAdminAccess();

      match /prices/{id} {
        allow read: if true;
        allow write: if isServiceAccount() || hasAdminAccess();
      }

      match /tax_rates/{id} {
        allow read: if true;
        allow write: if isServiceAccount() || hasAdminAccess();
      }
    }

    // =============================
    // üéü ROLE-BASED CONTENT ACCESS
    // =============================

  // Basic users can access basic content
    match /content-basic/{doc} {
      allow read: if hasBasicSubs() || hasPremiumSubs() || hasFlexyAccess();
    }
    // Premium users (Pro) and Flex users can access premium content

    match /content-premium/{doc} {
      allow read: if hasPremiumSubs() || hasFlexyAccess();
    }
    // Flexy users should have access to everything (like Premium)

    match /content-flexy/{doc} {
      allow read: if hasFlexyAccess() || hasPremiumSubs();
    }

    // =============================
    // üì± APP CONFIGURATION
    // =============================
    // App configuration - everyone can read, only admins can write
    match /config/{configDoc} {
      allow read: if true;
      allow write: if hasAdminAccess();
    }
    
    match /featureFlags/{flagId} {
      allow read: if true;
      allow write: if hasAdminAccess();
    }

    // =============================
    // PARTNER & AFFILIATE SYSTEM (HARDENED)
    // =============================
    
    // Partners collection - core partner management
    match /partners/{partnerId} {
      // Admins can read/write all partner data
      allow read, write: if hasAdminAccess();
      
      // Partners can read their own data only
      allow read: if isAuthenticated() && request.auth.uid == partnerId;
      
      // Cloud Functions can manage partners (critical for emulator)
      allow read, write: if isServiceAccount();
      
      // FIXED: Allow authenticated users to CREATE partner applications (any document ID)
      allow create: if isAuthenticated() && 
                     request.resource.data.uid == request.auth.uid &&
                     request.resource.data.status == 'pending';
      
      // TEMPORARY: Allow all authenticated users to write (for debugging registration)
      allow write: if isAuthenticated();
    }
    
    // Allow listing partners collection for admins and authenticated users
    match /partners {
      allow list: if hasAdminAccess() || isAuthenticated();
    }
    
    // Partner codes collection - for referral codes
    match /partnerCodes/{codeId} {
      // Admins can manage all codes
      allow read, write: if hasAdminAccess();
      
      // Partners can read codes they own
      allow read: if isAuthenticated() && 
                   (resource.data.partnerId == request.auth.uid ||
                    resource.data.createdBy == request.auth.uid);
      
      // Cloud Functions can manage codes
      allow read, write: if isServiceAccount();
    }
    
    // Allow listing partner codes for admins
    match /partnerCodes {
      allow list: if hasAdminAccess();
    }
    
    // Affiliate codes and referral tracking
    match /affiliate_codes/{codeId} {
      // Admins can manage all codes
      allow read, write: if hasAdminAccess();
      
      // Partners can read codes they own
      allow read: if isAuthenticated() && 
                   (resource.data.partnerId == request.auth.uid ||
                    resource.data.createdBy == request.auth.uid);
      
      // Cloud Functions can manage codes
      allow read, write: if isServiceAccount();
    }
    
    // Referral tracking
    match /referrals/{referralId} {
      // Admins can see all referrals
      allow read, write: if hasAdminAccess();
      
      // Partners can see their referrals
      allow read: if isAuthenticated() && 
                   (resource.data.partnerId == request.auth.uid ||
                    resource.data.referredBy == request.auth.uid);
      
      // Cloud Functions can track referrals
      allow read, write: if isServiceAccount();
    }

    // =============================
    // COMMISSION SYSTEM (HARDENED)
    // =============================
    match /commissionLedger/{entryId} {
      // Read only own entries (partner sees partnerId; affiliate sees affiliateId)
      allow read: if isAdmin() ||
                   (isPartner()   && resource.data.partnerId   == request.auth.uid) ||
                   (isAffiliate() && resource.data.affiliateId == request.auth.uid);

      // Writes from admin or Cloud Functions / service account
      allow write: if isAdmin() || isServiceAccount();
    }

    // =============================
    // REFERRAL CUSTOMERS SYSTEM
    // =============================
    match /referralCustomers/{customerId} {
      // Partners can read their own referral customers
      allow read: if isAuthenticated() && 
                   (resource.data.partnerId == request.auth.uid ||
                    resource.data.referredBy == request.auth.uid);
      
      // Admins can read all referral customers
      allow read: if hasAdminAccess();
      
      // Only Cloud Functions can write referral customer data
      allow write: if isServiceAccount();
    }

    // =============================
    // INVOICES SYSTEM
    // =============================
    match /invoices/{invoiceId} {
      // Partners can read invoices related to their referrals
      allow read: if isAuthenticated() && 
                   (resource.data.partnerId == request.auth.uid ||
                    resource.data.referredBy == request.auth.uid);
      
      // Admins can read all invoices
      allow read: if hasAdminAccess();
      
      // Only Cloud Functions can write invoice data
      allow write: if isServiceAccount();
    }

    match /payout_reports/{reportId} {
      // Read only own reports
      allow read: if isAdmin() ||
                   (isPartner()   && resource.data.partnerId   == request.auth.uid) ||
                   (isAffiliate() && resource.data.affiliateId == request.auth.uid);

      // Writes from admin or Cloud Functions / service account
      allow write: if isAdmin() || isServiceAccount();

      // Summaries per partner
      match /partner_summaries/{partnerId} {
        // Partner can read their own summary; admin can read all
        allow read: if isAdmin() || (isPartner() && partnerId == request.auth.uid);

        // Writes from admin or Cloud Functions / service account
        allow write: if isAdmin() || isServiceAccount();
      }
    }

    // =============================
    // üìß EMAIL NOTIFICATION SYSTEM
    // =============================
    
    // Mail collection - only Cloud Functions can write (Trigger Email extension)
    // TODO: Tighten rules if needed for additional security
    match /mail/{mailId} {
      // Deny all public writes - only server-side functions can write
      allow read, write: if false;
      
      // Allow Cloud Functions (service account) to write for email notifications
      allow write: if isServiceAccount();
      
      // Allow admins to read for debugging/monitoring
      allow read: if hasAdminAccess();
    }

    // =============================
    // üîî ADMIN NOTIFICATIONS SYSTEM
    // =============================
    
    // Admin notifications collection - only admins can read, Cloud Functions can write
    match /adminNotifications/{notificationId} {
      // Only admins can read notifications
      allow read: if hasAdminAccess();
      
      // Only Cloud Functions can write notifications
      allow write: if isServiceAccount();
    }

    // =============================
    // ü§ù PARTNER SYSTEM COLLECTIONS
    // =============================
    
    // Referral customers - partners can read their own customers
    match /referralCustomers/{customerId} {
      allow read: if isAuthenticated() && 
                  (resource.data.partnerId == request.auth.uid ||
                   resource.data.referredBy == request.auth.uid ||
                   hasAdminAccess());
      allow write: if hasAdminAccess() || isServiceAccount();
    }

    // Partner invoices - partners can read their own invoices
    match /invoices/{invoiceId} {
      allow read: if isAuthenticated() && 
                  (resource.data.partnerId == request.auth.uid ||
                   resource.data.referredBy == request.auth.uid ||
                   hasAdminAccess());
      allow write: if hasAdminAccess() || isServiceAccount();
    }

    // Commission ledger - fix collection name mismatch
    match /commissionLedger/{entryId} {
      allow read: if isAuthenticated() && 
                  (resource.data.partnerId == request.auth.uid ||
                   hasAdminAccess());
      allow write: if hasAdminAccess() || isServiceAccount();
    }
  }
}